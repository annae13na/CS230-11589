# Draw It or Lose It â€“ Web Version
### CS 230 Project Software Design Template  
**Author:** Anna Fuentes  
**Version:** 1.0  

---

## Table of Contents
1. CS 230 Project Software Design Template
2. Table of Contents
3. Document Revision History
4. Executive Summary
5. Requirements
6. Design Constraints
7. System Architecture View
8. Domain Model
9. Evaluation
10. Recommendations
11. References

---

## Document Revision History

| Version | Date     | Page(s) | Author      | Comments                          |
|---------|----------|---------|-------------|-----------------------------------|
| 1.0     | 07/25/25 | 3-4     | Anna Fuentes | Initial draft of software design document |
| 2.0     | 08/16/25 | 5-6     | Anna Fuentes | Recommendations (Updated)         |
| 2.0     | 08/16/25 | 7       | Anna Fuentes | References                        |

---

## Executive Summary
The Gaming Room aims to develop a web-based version of their Android game, *Draw It or Lose It*, and make it accessible across multiple platforms.  
This project proposes a scalable, object-oriented solution using Java and common design patterns (Singleton and Iterator) to meet client requirements, including managing game instances, ensuring unique team and player names, and enabling efficient memory use.  
This document outlines software architecture decisions, design constraints, and development recommendations tailored to a distributed, web-based environment.

---

## Requirements
- A game must support one or more teams  
- Each team can have multiple players  
- Game and team names must be unique  
- Only one instance of the `GameService` should exist in memory (Singleton)  
- Unique IDs must be generated for games, teams, and players  

---

## Design Constraints
- **Single Instance Limitation:** Only one Game Service instance should exist to manage state across the system, requiring the Singleton pattern.  
- **Name Uniqueness:** Game, team, and player names must be validated before creation using an iterator/search through collections.  
- **Web-Based Distribution:** The system must be lightweight, scalable, and network-resilient to support cross-platform users.  
- **Extensibility:** The object model must be modular and support future game logic changes or enhancements.  
- **Memory Management:** Proper handling of object lifecycle, especially for active/inactive games, is crucial.  

These constraints drive decisions about patterns, architecture, and technology stack to ensure scalability and maintainability.

---

## System Architecture View
*Not required for this project.*

---

## Domain Model
The UML diagram represents a clear object-oriented structure.

- **Entity Class** is a base class with shared attributes (`id`, `name`) and methods for all other domain objects.  
- **Game Service:** Singleton managing all games, teams, and players, holding lists and generating unique IDs.  
- **Game, Team, and Player** all inherit from Entity, reusing code and maintaining consistency.  

**OOP Principles Used**  
- **Inheritance:** Game, Team, and Player inherit from Entity  
- **Encapsulation:** Attributes are private, accessed via getters  
- **Polymorphism:** Shared behavior through the Entity class  
- **Design Patterns:** Singleton for `GameService` and Iterator for searching unique names  

---

## Evaluation

| Development Requirements | Mac | Linux | Windows | Mobile Devices |
|---------------------------|-----|-------|---------|----------------|
| **Server Side** | Stable Unix-based backend. Supports Java. Slightly less enterprise-standard than Linux. | Most stable and cost-effective for hosting. Open-source and high performance. | Compatible, but may have licensing costs. Good support for .NET/Windows servers. | Not ideal for hosting, mobile OSes are client platforms. |
| **Client Side** | Requires Mac-specific testing. Development requires Apple hardware. | Requires specific testing environments, great for Android. | Widely supported, development is cost-effective. | Android/iOS apps need separate testing; more complex deployment pipelines. |
| **Development Tools** | IntelliJ, Eclipse, Xcode. Java supported. | IntelliJ, Eclipse, NetBeans. Ideal for backend. | Eclipse, IntelliJ, Visual Studio. | Android Studio for Android, Xcode for iOS. Cross-platform tools like React Native helpful. |

---

## Recommendations

1. **Operating Platform:** Use **Ubuntu Server LTS** for its stability, long-term support, and compatibility with Java. It is cost-effective and supports containerization with Docker and Kubernetes [Wikipedia, 2025; Canonical, 2025; TechRadar, 2025].  
2. **Operating System Architectures:** Apply a **multi-tier architecture**: Presentation Layer, Application Layer (Java backend), and Database Layer. Running this on 64-bit Ubuntu Server improves scalability [Wikipedia, 2025].  
3. **Storage Management:** Use **PostgreSQL** for ACID-compliant transactions. Add replication and backups to prevent data loss. MySQL is also an option, but PostgreSQL is more powerful for complex applications.  
4. **Memory Management:** Use the **G1 Garbage Collector (G1GC)** for predictable performance. Tune JVM heap settings. Add caching with Redis to reduce database strain [Gipyeong-Lee, 2023; Sematext, n.d.].  
5. **Distributed Systems and Networks:** Use **RESTful APIs** over HTTPS with **WebSockets** for real-time updates. Implement load-balancing (NGINX/HAProxy), retry logic, failover, and a CDN.  
6. **Security:** Encrypt all traffic with HTTPS, use **JWT or OAuth2** for authentication, and implement RBAC. Encrypt sensitive data with AES-256, validate all inputs, and maintain logging and monitoring tools [TechRadar, 2025].  

---

## References

- Drake, N., Turner, B., & January 2021, M. S. 04. (n.d.). *Best Linux Server distros of 2021*. TechRadar. https://www.techradar.com/best/best-linux-server-distro  
- JVM G1GC Tuning. (2023, February 24). Github.io. https://gipyeong-lee.github.io/2023/02/24/JVM-G1GC-Tuning/  
- Kuc, R. (2020, January 14). *How to Tune Java Garbage Collection - Sematext*. https://sematext.com/java-garbage-collection-tuning/  
- Ubuntu. (2020, April 9). Wikipedia. https://en.wikipedia.org/wiki/Ubuntu  
- *Ubuntu Server 25.04 vs 24.04 LTS: Key Differences and Which to Choose.* (2025). Bacloud.com. https://www.bacloud.com/en/blog/169/ubuntu  
- Wikipedia Contributors. (2025, April 23). *Garbage-first collector*. Wikipedia.  
- Wikipedia Contributors. (2025, July 29). *Long-term support*. Wikipedia.  
